

f2c functions that are needed: i_len, s_copy, s_cmp, i_nint

Functions that have to be translated next:
 dlamch, dgbcon, dgbequ, dgbrfs, 
 dgbtrf*, dgbtrs*
 dgbsvxx



Functions that have been translated:

Blas Level 1:
 daxpy, dcopy, idamax, lsame, dscal, dswap, xerbla

Blas Level 2:
 dger, dgbmv, dgemv, dtbsv, 

Blas Level 3:
 dgemm, dtrsm 

Lapack-Drivers:
 dgbsv, dgbsvx

Lapack-Computational:
 dgbtrf, dgbtrs, dgbtf2,

Lapack-Auxiliary: 
 dlacpy, dlangb, dlantb, dlaqgb, dlaswp, ieeeck, ilaenv, iparmq


Some functions define static local variables (for example laswp) - maybe we 
should use non-static local varibales instead? Because when two different 
threads use a routine concurrently, each needs it own local variables. Maybe 
define a macro LA_STATIC that evaluates to static - so we may globally select
whether static or local (stack-allocated) variables shall be used. When there
are a lot of local variables, maybe we could get stack overflow, if they are 
not static? We should have the option to roll back to static, if necessarry, 
so using a macro seems a suitable approach. Another approach would be to 
embed the rouines in a class and use member variables...but that may go 
very much against the grain of the library design and in routines converted
later, we would have to make a lot of edits...hmm...bad! for the time being,
i'll just leave it as is...In my typical scenario (of audio apps and plugins),
the routines will be used from one therad only anyway.


For the naming conventions: We have currently retained the l and i prefixes
(for example in iamax, lsame) for routines that work with integers and 
logicals (mostly they return values of the respective type). Maybe get rid
of these prefixes, too - or maybe not.