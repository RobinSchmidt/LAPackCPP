I want to avoid code duplication as much as possible, so ideally, whenever 
possible, the same template should be used, regardless of whether the matrices
are real or complex valued. This is especially true for the driver routines 
like _gesv, _geev, etc. Whenever i translate a new routine, i have to decide, 
whether i should use the real or complex valued version for translation, i.e. 
dgsev vs zgsev or dgeev vs zgeev. In some matrix formulas, the correct 
generalization for matrix-transposition from the real to the complex case is
to do an additional complex conjugation (the combined operation is often called
Hermitian transpose denoted by **H instead of **T for the regular transpose), 
so for the lower level computational routines, we probably want to use **H 
whenever **T is used in the real case. The ideal solution would be, if the 
code for the routine contains an instruction for complex conjugation wherever 
this is the case, and that isntruction would just boil down to an inlined 
identity operation or no-op in case of real arguments. Something like:

w = conj(z);

should occur in the code of the routines, and we should have explicit 
template specializations for real number types like:

template double conj(double z) 
{ 
  return z; // identity - can be optimized out
}

The problem is that f2c may produce c-code like:

if(noconj) {
  c.r = a.r + b.r; 
  c.i = a.i + b.i;
}
else {
  c.r = a.r + b.r; 
  c.i = a.i - b.i;
}

when complex numbers are involved. I'm not sure, how deal with this best. 
Perhaps the only practical solution is to use the real valued routines for 
translation and add the complex conjugation instructions manually, where it 
makes sense (refer to the original .f files for the complex case to figure
out where this is the case). This needs some unit tests to make sure that this 
has been done correctly. And it should be stated explictly in the documentation
whether or not a routine is suitable for use with complex numbers.
















//=============================================================================

Notes:

-maybe instead of inserting "conj" into the routines, we may need a sort of
conjIf(double x, bool doConj) - but that will not play well with optimzation

-maybe that decision/conditional only occurs in blas routines and we may get 
away with doing all these manual additions only in blas, not in lapack?

-maybe for Blas-routines use d-versions and lapack routines use z-versions? 
Maybe all the complex-cojugation stuff, if necessarry is delegatedto blas by 
lapack anyway?





//-----------------------------------------------------------------------------
from dgemv.f:

On entry, TRANS specifies the operation to be performed as follows:
TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.
TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.
TRANS = 'C' or 'c'   y := alpha*A**T*x + beta*y.

*        Form  y := alpha*A**T*x + y.
*
          JY = KY
          IF (INCX.EQ.1) THEN
              DO 100 J = 1,N
                  TEMP = ZERO
                  DO 90 I = 1,M
                      TEMP = TEMP + A(I,J)*X(I)
   90             CONTINUE
                  Y(JY) = Y(JY) + ALPHA*TEMP
                  JY = JY + INCY
  100         CONTINUE
          ELSE
              DO 120 J = 1,N
                  TEMP = ZERO
                  IX = KX
                  DO 110 I = 1,M
                      TEMP = TEMP + A(I,J)*X(IX)
                      IX = IX + INCX
  110             CONTINUE
                  Y(JY) = Y(JY) + ALPHA*TEMP
                  JY = JY + INCY
  120         CONTINUE
          END IF

//-----------------------------------------------------------------------------
from zgemv.f:

On entry, TRANS specifies the operation to be performed as follows:
TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.
TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.
TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.

*
*        Form  y := alpha*A**T*x + y  or  y := alpha*A**H*x + y.
*
          JY = KY
          IF (INCX.EQ.1) THEN
              DO 110 J = 1,N
                  TEMP = ZERO
                  IF (NOCONJ) THEN
                      DO 90 I = 1,M
                          TEMP = TEMP + A(I,J)*X(I)
   90                 CONTINUE
                  ELSE
                      DO 100 I = 1,M
                          TEMP = TEMP + DCONJG(A(I,J))*X(I)
  100                 CONTINUE
                  END IF
                  Y(JY) = Y(JY) + ALPHA*TEMP
                  JY = JY + INCY
  110         CONTINUE
